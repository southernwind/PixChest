using System.IO;
using System.Reactive.Linq;
using System.Runtime.InteropServices;

using MetadataExtractor;

using Microsoft.Extensions.DependencyModel;

using ObservableCollections;

using PixChest.Database;
using PixChest.Database.Tables;
using PixChest.Models.Files.Metadata.Images;
using PixChest.Models.Files.Metadata.Images.Formats;
using PixChest.Utils.Tools;

using R3;

namespace PixChest.Models.Files;
public class FileRegistrar {
	private readonly PixChestDbContext _db;
	public ObservableQueue<string> RegistrationQueue {
		get;
	} = [];

	public ReactivePropertySlim<long> QueueCount {
		get;
	} = new();

	public FileRegistrar(PixChestDbContext dbContext) {
		this._db = dbContext;
		this.RegistrationQueue
			.ObserveAdd()
			.Synchronize()
			.Subscribe(_ => {
				this.RegisterFiles();
			});

		this.RegistrationQueue.ObserveCountChanged(true).ThrottleLast(TimeSpan.FromSeconds(0.1)).Subscribe(x => {
			this.QueueCount.Value = x;
		});
	}

	public void RegisterFiles() {
		while (this.RegistrationQueue.TryDequeue(out var filepath)) {
			try {

				using var transaction = this._db.Database.BeginTransaction();
				var isExists = this._db.MediaFiles.Any(x => x.FilePath == filepath);
				if (isExists) {
					continue;
				}
				using var imageMs = new MemoryStream();

				using (var imageFs = File.OpenRead(filepath)) {
					imageFs.CopyTo(imageMs);
					imageMs.Position = 0;
				}
				var thumbPath = FilePathUtility.GetThumbnailRelativeFilePath(filepath);
				try {
					var image = ImageUtility.CreateThumbnail(imageMs, 300, 300);
					new FileInfo(thumbPath).Directory?.Create();
					File.WriteAllBytes(thumbPath, image);
				} catch {
					thumbPath = null;
				}

				var mf = new MediaFile {
					DirectoryPath = Path.GetDirectoryName(filepath)!,
					FilePath = filepath,
					ThumbnailFileName = thumbPath,
					IsAutoGeneratedThumbnail = true,
					FileSize = new FileInfo(filepath).Length,
				};

				// metadata
				imageMs.Position = 0;
				using var meta = ImageMetadataFactory.Create(imageMs);

				if (meta.Latitude != null && meta.Longitude != null && meta.LatitudeRef != null && meta.LongitudeRef != null) {
					var latitude = (meta.Latitude[0].ToDouble() + (meta.Latitude[1].ToDouble() / 60) + (meta.Latitude[2].ToDouble() / 3600)) * (meta.LatitudeRef == "S" ? -1 : 1);
					var longitude= (meta.Longitude[0].ToDouble() + (meta.Longitude[1].ToDouble() / 60) + (meta.Longitude[2].ToDouble() / 3600)) * (meta.LongitudeRef == "W" ? -1 : 1);
					mf.Altitude = meta.Altitude?.ToDouble() * (meta.AltitudeRef == 1 ? -1 : 1);
					mf.Latitude = latitude;
					mf.Longitude= longitude;
					if (!this._db.Positions.Any(x => x.Latitude == latitude && x.Longitude == longitude)) {
						this._db.Add(new Position() { Latitude = latitude, Longitude = longitude });
					}
				}

				mf.Height = meta.Height;
				mf.Width = meta.Width;

				if (meta is Jpeg jpeg) {
					mf.Jpeg = jpeg.CreateMetadataRecord();
				} else if (meta is Png png) {
					mf.Png = png.CreateMetadataRecord();
				} else if (meta is Bmp bmp) {
					mf.Bmp = bmp.CreateMetadataRecord();
				} else if (meta is Gif gif) {
					mf.Gif = gif.CreateMetadataRecord();
				} else if (meta is Heif heif) {
					mf.Heif = heif.CreateMetadataRecord();
				}

				this._db.MediaFiles.Add(mf);
				this._db.SaveChanges();
				transaction.Commit();
			} catch (Exception e) {
				Console.WriteLine(e);
				throw;
			}
		}
	}
}
