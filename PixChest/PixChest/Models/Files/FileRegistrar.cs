using System.IO;
using System.Reactive.Linq;

using ObservableCollections;

using PixChest.Database;
using PixChest.Database.Tables;
using PixChest.Utils.Tools;

using R3;

namespace PixChest.Models.Files;
public class FileRegistrar {
	private readonly PixChestDbContext _db;
	public ObservableQueue<string> RegistrationQueue {
		get;
	} = [];

	public ReactivePropertySlim<long> QueueCount {
		get;
	} = new();

	public FileRegistrar(PixChestDbContext dbContext) {
		this._db = dbContext;
		this.RegistrationQueue
			.ObserveAdd()
			.Synchronize()
			.Subscribe(_ => {
				this.RegisterFiles();
			});

		this.RegistrationQueue.ObserveCountChanged(true).ThrottleLast(TimeSpan.FromSeconds(1)).Subscribe(x => {
			this.QueueCount.Value = x;
		});
	}

	public void RegisterFiles() {
		while (this.RegistrationQueue.TryDequeue(out var filepath)) {
			using var transaction = this._db.Database.BeginTransaction();
			var isExists = this._db.MediaFiles.Any(x => x.FilePath == filepath);
			if (isExists) {
				continue;
			}

			var thumbPath = FilePathUtility.GetThumbnailRelativeFilePath(filepath);
			using var fs = File.OpenRead(filepath);
			try {
				var image = ImageUtility.CreateThumbnail(fs, 300, 300);
				new FileInfo(thumbPath).Directory?.Create();
				File.WriteAllBytes(thumbPath, image);
			} catch {
				thumbPath = null;
			}
			this._db.MediaFiles.Add(new MediaFile {
				DirectoryPath = Path.GetDirectoryName(filepath)!,
				FilePath = filepath,
				ThumbnailFileName = thumbPath,
				IsAutoGeneratedThumbnail = true
			});
			this._db.SaveChanges();
			transaction.Commit();
		}
	}
}
