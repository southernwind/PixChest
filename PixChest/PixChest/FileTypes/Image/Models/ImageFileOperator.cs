using PixChest.Database.Tables;
using System.IO;
using PixChest.Models.Files.Metadata.Images;
using PixChest.Models.Files.Metadata.Images.Formats;
using ImageMagick;
using PixChest.Utils.Enums;
using PixChest.FileTypes.Base.Models;
using PixChest.FileTypes.Base.Models.Interfaces;
using PixChest.Utils.Constants;
using System.Threading.Tasks;

namespace PixChest.FileTypes.Image.Models;
[AddTransient]
public class ImageFileOperator : BaseFileOperator {
	public override MediaType TargetMediaType {
		get;
	} = MediaType.Image;

	public override async Task RegisterFileAsync(string filePath) {
		using var lockObject = await LockObjectConstants.DbLock.LockAsync();
		using var transaction = await this._db.Database.BeginTransactionAsync();
		var isExists = await this._db.MediaFiles.AnyAsync(x => x.FilePath == filePath);
		if (isExists) {
			return;
		}
		using var fileMs = new MemoryStream();

		using (var fileFs = File.OpenRead(filePath)) {
			fileFs.CopyTo(fileMs);
			fileMs.Position = 0;
		}
		var thumbPath = FilePathUtility.GetThumbnailRelativeFilePath(filePath);
		try {
			var image = this.CreateThumbnail(fileMs, 300, 300);
			new FileInfo(thumbPath).Directory?.Create();
			File.WriteAllBytes(thumbPath, image);
		} catch {
			thumbPath = null;
		}

		var fileInfo = new FileInfo(filePath);

		var mf = new MediaFile {
			DirectoryPath = Path.GetDirectoryName(filePath)!,
			FilePath = filePath,
			ThumbnailFileName = thumbPath,
			Rate = -1,
			Description = "",
			IsAutoGeneratedThumbnail = true,
			FileSize = fileInfo.Exists ? fileInfo.Length : 0,
			CreationTime = fileInfo.Exists ? fileInfo.CreationTime : DateTime.MinValue,
			ModifiedTime = fileInfo.Exists ? fileInfo.LastWriteTime : DateTime.MinValue,
			LastAccessTime = fileInfo.Exists ? fileInfo.LastAccessTime : DateTime.MinValue,
			IsExists = fileInfo.Exists
		};

		// metadata
		fileMs.Position = 0;
		using var meta = ImageMetadataFactory.Create(fileMs);

		if (meta.Latitude != null && meta.Longitude != null && meta.LatitudeRef != null && meta.LongitudeRef != null) {
			var latitude = (meta.Latitude[0].ToDouble() + (meta.Latitude[1].ToDouble() / 60) + (meta.Latitude[2].ToDouble() / 3600)) * (meta.LatitudeRef == "S" ? -1 : 1);
			var longitude = (meta.Longitude[0].ToDouble() + (meta.Longitude[1].ToDouble() / 60) + (meta.Longitude[2].ToDouble() / 3600)) * (meta.LongitudeRef == "W" ? -1 : 1);
			mf.Altitude = meta.Altitude?.ToDouble() * (meta.AltitudeRef == 1 ? -1 : 1);
			mf.Latitude = latitude;
			mf.Longitude = longitude;
			if (!this._db.Positions.Any(x => x.Latitude == latitude && x.Longitude == longitude)) {
				this._db.Add(new Position() { Latitude = latitude, Longitude = longitude });
			}
		}

		mf.Height = meta.Height;
		mf.Width = meta.Width;

		if (meta is Jpeg jpeg) {
			mf.Jpeg = jpeg.CreateMetadataRecord();
		} else if (meta is Png png) {
			mf.Png = png.CreateMetadataRecord();
		} else if (meta is Bmp bmp) {
			mf.Bmp = bmp.CreateMetadataRecord();
		} else if (meta is Gif gif) {
			mf.Gif = gif.CreateMetadataRecord();
		} else if (meta is Heif heif) {
			mf.Heif = heif.CreateMetadataRecord();
		}

		await this._db.MediaFiles.AddAsync(mf);
		await this._db.SaveChangesAsync();
		await transaction.CommitAsync();
	}
	public byte[] CreateThumbnail(IFileModel fileModel, uint width, uint height) {
		using var fileFs = File.OpenRead(fileModel.FilePath);
		using var ms = new MemoryStream();
		using var mi = new MagickImage(fileFs);
		mi.AutoOrient();
		mi.Thumbnail(width, height);
		mi.Format = MagickFormat.Jpg;
		mi.Write(ms);
		return ms.ToArray();
	}

	public byte[] CreateThumbnail(Stream fileStream, uint width, uint height) {
		using var ms = new MemoryStream();
		using var mi = new MagickImage(fileStream);
		mi.AutoOrient();
		mi.Thumbnail(width, height);
		mi.Format = MagickFormat.Jpg;
		mi.Write(ms);
		return ms.ToArray();
	}
}
